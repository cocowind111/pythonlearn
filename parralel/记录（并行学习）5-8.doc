第5天
一.并行和并发概念
    并发：在一段时间交替去执行多个任务。
    并行：在一段时间内真正同时一起执行多个任务
二、进程
1.一个正在运行的程序就是一个进程。（注：一个程序运行后至少有一个进程。）
2.python采用multiprogressing模块完成多进程计算。（文件名parralellearn2.py）
import time 
import multiprocessing
def sing(b):
    for i in range(3):
        print(f'唱歌with{b}')
        time.sleep(0.5)
def dance(name):
    for i in range(3):
        print(f'跳舞with{name}')
        time.sleep(0.5)
name1='yeye'
name2='gaga'
if __name__ == '__main__':
    time_start=time.time()
    sing_process=multiprocessing.Process(target=sing,args=('yeye',))#位置参数，按照参数的位置顺序匹配输入参数。
    dance_process=multiprocessing.Process(target=dance, kwargs={'name':name2})#关键字参数，通过键值对进行输入
    sing_process.start()
    dance_process.start()
    time_end=time.time()
    print(f'共耗费{time_end-time_start}秒用于计算')
通过process类创建子进程使用的目标函数（target）,目标函数接收的位置参数(args),目标函数接收的关键字参数(kwargs)。

第6天
1.*args和**kwargs的使用（文件名parralellearn3）
*args允许函数接收任意数量的位置参数。**kwargs允许函数接受任意数量的关键字参数。
使用上述两种变量输入功能时，要把普通的位置参数/关键字参数放在*args和**kwargs之前。

import time 
import multiprocessing

def saykw(name,**kwargs):
    print(f'我想说的话是{name}')
    for name1 in kwargs.items():
        print(f'我想说的话是{name1}')
def say(name,*args):
    print(f'我想说的话是{name}')
    for name1 in args:
        print(f'我想说的话是{name1}')        
name1='yeye'
name2='gaga'
if __name__ == '__main__':
    time_start=time.time()
    say_process=multiprocessing.Process(target=say,args=(name1,name2,name2))
    saykw_process=multiprocessing.Process(target=saykw,kwargs={'name':'gaga','name2':'yeye','name3':'yeyedebaby'})
    saykw_process2=multiprocessing.Process(target=saykw,args=(name1,),kwargs={'name2':'yeye','name3':'yeyedebaby'})
    say_process.start()
    saykw_process.start()
    saykw_process2.start()
    time_end=time.time()
    print(f'共耗费{time_end-time_start}秒用于计算')
1.1使用args输入，要用（），并把*args中补充的参数放在普通位置参数后面
比如args=(name1,name2,name2)
name1是普通位置参数的输入值。
1.2使用kwargs输入，要用{}，并把**kwargs中补充的参数放到普通的关键字参数后面。
比如kwargs={'name':'gaga','name2':'yeye','name3':'yeyedebaby'}
'name':'gaga'是普通关键字参数的输入
备注：也可采用位置参数的方式指定普通参数的输入值。
比如args=(name1,),kwargs={'name2':'yeye','name3':'yeyedebaby'}
name1为普通参数，采用位置参数的方式指定

2.python中的子进程和主进程
正常执行python程序时所占用的进程为主进程。
通过multiprocessing的process类创建的进程为子进程。

3.multiprocessing模块中process的start方法
当你调用 start() 时，Python 会在一个新的子进程中执行 run() 方法。start() 方法并不会直接执行任务，
它只是启动子进程，触发 run() 的执行。
say_process.start()

4.multiprocessing模块中process的join方法
阻塞主进程，直到调用join方法的子进程执行完毕，才会继续执行主进程。
say_process.join()

5.使用多进程的常规流程是：将各进程依次调用start后，再调用jion。而不是start一个进程后立即调用join。

6.multiprocessing模块中process的run方法
定义子进程启动后执行的代码。
在创建Process时不指定target，那么执行时没有任何效果。因为默认的run方法是判断如果不指定target，那就什么都不做。
所以一般直接在实例化process时，指定target，就可以达到run方法的效果。
say_process.run()

第7天
1.multiprocessing模块中process的terminate方法

2.multiprocessing模块中process的kill方法

3.pool的使用